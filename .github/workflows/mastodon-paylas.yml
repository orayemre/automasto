name: Mastodon Otomatik Paylaşım (VPN/Tunnel)
on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:

jobs:
  paylas:
    runs-on: ubuntu-latest
    steps:
      - name: Node.js Kur
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Gist'ten Dosyayı İndir
        run: |
          echo "Gist'ten hikayeler dosyası indiriliyor..."
          curl -H "Authorization: token ${{ secrets.GIST_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/gists/fa7b2f4758251a7901a64d3715b171d7 \
               -o gist.json
          
          sudo apt-get update && sudo apt-get install -y jq
          cat gist.json | jq -r '.files["hikayeler.txt"].content' > hikayeler.txt
          
          if [ ! -s "hikayeler.txt" ]; then
            echo "Hikayeler dosyası boş!"
            exit 1
          fi
          
          echo "✅ $(wc -l < hikayeler.txt) hikaye indirildi"

      - name: Cloudflare Tunnel Setup
        run: |
          echo "=== Cloudflare Tunnel Kurulumu ==="
          
          # Cloudflared binary indir
          wget -q https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb
          sudo dpkg -i cloudflared-linux-amd64.deb
          
          # Tor kurulumu (alternatif yöntem)
          sudo apt-get update
          sudo apt-get install -y tor torsocks
          
          # Tor servisini başlat
          sudo systemctl start tor
          sleep 10
          
          # Tor bağlantı testi
          echo "🧅 Tor IP kontrolü:"
          torsocks curl -s https://httpbin.org/ip || echo "Tor bağlantısı başarısız"
          
          echo "🌐 Normal IP kontrolü:"
          curl -s https://httpbin.org/ip || echo "Normal bağlantı başarısız"

      - name: Multi-Method Mastodon Paylaşımı
        run: |
          npm install mastodon-api axios
          
          cat << 'EOF' > multi-method-script.js
          const fs = require('fs');
          const { spawn, exec } = require('child_process');
          const util = require('util');
          const execAsync = util.promisify(exec);
          
          // Hikayeler dosyasını oku
          const hikayeler = fs.readFileSync('hikayeler.txt', 'utf8')
                               .split('\n')
                               .filter(line => line.trim() !== '')
                               .filter(line => line.length > 10);
          
          console.log(`📚 Toplam ${hikayeler.length} hikaye bulundu`);
          
          // Method 1: Tor ile curl
          async function postWithTor(content, index) {
            try {
              console.log(`\n🧅 [TOR] ${index + 1}. hikaye paylaşılıyor...`);
              
              const truncatedContent = content.length > 480 ? content.substring(0, 477) + '...' : content;
              
              const cmd = [
                'torsocks', 'curl', '-s', '-X', 'POST',
                '-H', `Authorization: Bearer ${process.env.MASTODON_TOKEN}`,
                '-H', 'User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                '-H', 'Accept: application/json',
                '-H', 'Content-Type: application/json',
                '-d', JSON.stringify({
                  status: truncatedContent,
                  visibility: 'public'
                }),
                'https://sosyal.teknofest.app/api/v1/statuses'
              ].join(' ');
              
              const { stdout, stderr } = await execAsync(cmd);
              
              if (stdout.includes('"id"')) {
                console.log(`✅ [TOR] ${index + 1}. hikaye başarılı`);
                return { success: true, method: 'TOR' };
              } else if (stdout.includes('<!DOCTYPE html>')) {
                console.log(`❌ [TOR] ${index + 1}. hikaye - HTML yanıtı (Cloudflare)`);
                return { success: false, method: 'TOR' };
              } else {
                console.log(`⚠️ [TOR] ${index + 1}. hikaye - belirsiz yanıt`);
                return { success: false, method: 'TOR' };
              }
              
            } catch (error) {
              console.log(`❌ [TOR] ${index + 1}. hikaye hata:`, error.message);
              return { success: false, method: 'TOR' };
            }
          }
          
          // Method 2: Farklı User-Agent ile normal curl
          async function postWithUserAgent(content, index) {
            try {
              console.log(`\n🎭 [UA] ${index + 1}. hikaye paylaşılıyor...`);
              
              const userAgents = [
                'Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15',
                'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36',
                'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko)',
                'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101'
              ];
              
              const randomUA = userAgents[Math.floor(Math.random() * userAgents.length)];
              const truncatedContent = content.length > 480 ? content.substring(0, 477) + '...' : content;
              
              const cmd = [
                'curl', '-s', '-X', 'POST',
                '-H', `Authorization: Bearer ${process.env.MASTODON_TOKEN}`,
                '-H', `User-Agent: ${randomUA}`,
                '-H', 'Accept: application/json',
                '-H', 'Content-Type: application/json',
                '-H', 'X-Forwarded-For: ' + Math.floor(Math.random() * 255) + '.' + Math.floor(Math.random() * 255) + '.1.1',
                '-d', JSON.stringify({
                  status: truncatedContent,
                  visibility: 'public'
                }),
                'https://sosyal.teknofest.app/api/v1/statuses'
              ].join(' ');
              
              const { stdout } = await execAsync(cmd);
              
              if (stdout.includes('"id"')) {
                console.log(`✅ [UA] ${index + 1}. hikaye başarılı`);
                return { success: true, method: 'User-Agent' };
              } else {
                console.log(`❌ [UA] ${index + 1}. hikaye başarısız`);
                return { success: false, method: 'User-Agent' };
              }
              
            } catch (error) {
              console.log(`❌ [UA] ${index + 1}. hikaye hata:`, error.message);
              return { success: false, method: 'User-Agent' };
            }
          }
          
          // Method 3: Delay ve Retry ile
          async function postWithRetry(content, index) {
            try {
              console.log(`\n🔄 [RETRY] ${index + 1}. hikaye paylaşılıyor...`);
              
              const truncatedContent = content.length > 480 ? content.substring(0, 477) + '...' : content;
              
              // Rastgele delay (1-3 saniye)
              const delay = Math.floor(Math.random() * 3000) + 1000;
              await new Promise(resolve => setTimeout(resolve, delay));
              
              const cmd = [
                'curl', '-s', '-X', 'POST',
                '--max-time', '30',
                '--retry', '2',
                '--retry-delay', '5',
                '-H', `Authorization: Bearer ${process.env.MASTODON_TOKEN}`,
                '-H', 'User-Agent: PostmanRuntime/7.29.2',
                '-H', 'Accept: application/json',
                '-H', 'Content-Type: application/json',
                '-H', 'Cache-Control: no-cache',
                '-d', JSON.stringify({
                  status: truncatedContent,
                  visibility: 'public'
                }),
                'https://sosyal.teknofest.app/api/v1/statuses'
              ].join(' ');
              
              const { stdout } = await execAsync(cmd);
              
              if (stdout.includes('"id"')) {
                console.log(`✅ [RETRY] ${index + 1}. hikaye başarılı`);
                return { success: true, method: 'Retry' };
              } else {
                console.log(`❌ [RETRY] ${index + 1}. hikaye başarısız`);
                return { success: false, method: 'Retry' };
              }
              
            } catch (error) {
              console.log(`❌ [RETRY] ${index + 1}. hikaye hata:`, error.message);
              return { success: false, method: 'Retry' };
            }
          }
          
          // Ana fonksiyon
          async function main() {
            const secilenHikayeler = hikayeler.sort(() => 0.5 - Math.random()).slice(0, 3);
            console.log(`\n🎯 ${secilenHikayeler.length} hikaye 3 farklı yöntemle denenecek`);
            
            const results = {
              'TOR': { success: 0, total: 0 },
              'User-Agent': { success: 0, total: 0 },
              'Retry': { success: 0, total: 0 }
            };
            
            for (let i = 0; i < secilenHikayeler.length; i++) {
              const hikaye = secilenHikayeler[i];
              console.log(`\n📝 === ${i + 1}. Hikaye (${hikaye.length} karakter) ===`);
              
              // Üç yöntemi sırayla dene
              const methods = [
                () => postWithTor(hikaye, i),
                () => postWithUserAgent(hikaye, i),
                () => postWithRetry(hikaye, i)
              ];
              
              let posted = false;
              for (const method of methods) {
                if (posted) break;
                
                const result = await method();
                results[result.method].total++;
                
                if (result.success) {
                  results[result.method].success++;
                  posted = true;
                  console.log(`✅ Hikaye ${result.method} yöntemi ile başarılı!`);
                  break;
                }
                
                // Yöntemler arası kısa bekleme
                await new Promise(resolve => setTimeout(resolve, 1000));
              }
              
              if (!posted) {
                console.log(`❌ ${i + 1}. hikaye tüm yöntemlerle başarısız`);
              }
              
              // Hikayeler arası bekleme
              if (i < secilenHikayeler.length - 1) {
                console.log('⏱️ 5 saniye bekleniyor...');
                await new Promise(resolve => setTimeout(resolve, 5000));
              }
            }
            
            // Sonuç raporu
            console.log(`\n📊 === YÖNTEMLERİN BAŞARI ORANLARI ===`);
            for (const [method, stats] of Object.entries(results)) {
              const rate = stats.total > 0 ? Math.round((stats.success / stats.total) * 100) : 0;
              console.log(`${method}: ${stats.success}/${stats.total} (${rate}%)`);
            }
          }
          
          main().catch(error => {
            console.error('💥 Ana fonksiyonda hata:', error);
            process.exit(1);
          });
          EOF
          
          echo "🚀 Multi-method paylaşım başlatılıyor..."
          node multi-method-script.js
        env:
          MASTODON_TOKEN: ${{ secrets.MASTODON_TOKEN }}
