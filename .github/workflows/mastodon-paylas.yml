name: Mastodon Otomatik Paylaşım (Proxy)
on:
  schedule:
    - cron: '0 8 * * *'
  workflow_dispatch:

jobs:
  paylas:
    runs-on: ubuntu-latest
    steps:
      - name: Node.js Kur
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Gist'ten Dosyayı İndir
        run: |
          echo "Gist'ten hikayeler dosyası indiriliyor..."
          curl -H "Authorization: token ${{ secrets.GIST_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/gists/fa7b2f4758251a7901a64d3715b171d7 \
               -o gist.json
          
          sudo apt-get update && sudo apt-get install -y jq
          cat gist.json | jq -r '.files["hikayeler.txt"].content' > hikayeler.txt
          
          if [ ! -f "hikayeler.txt" ] || [ ! -s "hikayeler.txt" ]; then
            echo "Hikayeler dosyası oluşturulamadı!"
            exit 1
          fi
          
          echo "✅ $(wc -l < hikayeler.txt) hikaye indirildi"
          
      - name: Proxy Setup ve Mastodon Paylaşımı
        run: |
          echo "=== Ücretsiz Proxy Listesi Alınıyor ==="
          
          # Ücretsiz HTTP proxy listesi al
          curl -s "https://www.proxy-list.download/api/v1/get?type=http&anon=elite&country=US" > proxy_list.txt
          
          # Eğer yukarıdaki çalışmazsa alternatif kaynak
          if [ ! -s "proxy_list.txt" ]; then
            curl -s "https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt" | head -20 > proxy_list.txt
          fi
          
          # Eğer hâlâ boşsa manuel proxy listesi
          if [ ! -s "proxy_list.txt" ]; then
            cat << 'PROXY_EOF' > proxy_list.txt
          8.210.83.33:80
          47.74.152.29:8888
          20.111.54.16:8123
          103.127.1.130:80
          190.61.88.147:8080
          45.32.104.226:80
          178.32.116.64:3128
          95.217.34.209:3128
          162.240.75.37:80
          134.195.101.34:8080
          PROXY_EOF
          fi
          
          echo "Proxy listesi:"
          head -5 proxy_list.txt
          echo ""
          
          echo "=== Hikaye Paylaşım Scripti ==="
          
          npm install mastodon-api axios https-proxy-agent
          
          cat << 'EOF' > proxy-script.js
          const fs = require('fs');
          const axios = require('axios');
          const { HttpsProxyAgent } = require('https-proxy-agent');
          
          // Hikayeler dosyasını oku
          const hikayeler = fs.readFileSync('hikayeler.txt', 'utf8')
                               .split('\n')
                               .filter(line => line.trim() !== '')
                               .filter(line => line.length > 10);
          
          console.log(`📚 Toplam ${hikayeler.length} hikaye bulundu`);
          
          // Proxy listesini oku
          const proxyList = fs.readFileSync('proxy_list.txt', 'utf8')
                             .split('\n')
                             .filter(line => line.trim() !== '')
                             .map(line => line.trim());
          
          console.log(`🔄 ${proxyList.length} proxy bulundu`);
          
          // Rastgele proxy seç
          function getRandomProxy() {
            const proxy = proxyList[Math.floor(Math.random() * proxyList.length)];
            return `http://${proxy}`;
          }
          
          // Proxy ile API çağrısı
          async function callWithProxy(url, data, method = 'GET') {
            const maxRetries = 3;
            
            for (let attempt = 0; attempt < maxRetries; attempt++) {
              try {
                const proxyUrl = getRandomProxy();
                console.log(`🔄 Deneme ${attempt + 1}: ${proxyUrl} kullanılıyor`);
                
                const agent = new HttpsProxyAgent(proxyUrl);
                
                const config = {
                  method,
                  url,
                  headers: {
                    'Authorization': `Bearer ${process.env.MASTODON_TOKEN}`,
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                    'Accept': 'application/json',
                    'Content-Type': 'application/json'
                  },
                  httpsAgent: agent,
                  httpAgent: agent,
                  timeout: 10000
                };
                
                if (data) {
                  config.data = data;
                }
                
                const response = await axios(config);
                console.log(`✅ Başarılı yanıt: ${response.status}`);
                return response.data;
                
              } catch (error) {
                console.log(`❌ Deneme ${attempt + 1} başarısız: ${error.message}`);
                if (attempt === maxRetries - 1) {
                  throw error;
                }
                // Sonraki denemede farklı proxy kullanılacak
                await new Promise(resolve => setTimeout(resolve, 1000));
              }
            }
          }
          
          async function testConnection() {
            try {
              console.log('\n🔐 Hesap bilgileri kontrol ediliyor...');
              const account = await callWithProxy('https://sosyal.teknofest.app/api/v1/accounts/verify_credentials');
              
              console.log('✅ API bağlantısı başarılı!');
              console.log(`👤 Kullanıcı: ${account.username || account.acct || 'Bilinmiyor'}`);
              console.log(`📊 Paylaşım sayısı: ${account.statuses_count || 'Bilinmiyor'}`);
              
              return true;
            } catch (error) {
              console.error('❌ Hesap doğrulama başarısız:', error.message);
              return false;
            }
          }
          
          async function postStatus(content, index) {
            try {
              const truncatedContent = content.length > 480 ? content.substring(0, 477) + '...' : content;
              
              console.log(`\n📝 ${index + 1}. hikaye paylaşılıyor (${truncatedContent.length} karakter)...`);
              
              const result = await callWithProxy(
                'https://sosyal.teknofest.app/api/v1/statuses',
                {
                  status: truncatedContent,
                  visibility: 'public'
                },
                'POST'
              );
              
              if (result && result.id) {
                const postUrl = `https://sosyal.teknofest.app/@terikisi/${result.id}`;
                console.log(`✅ ${index + 1}. hikaye başarılı: ${postUrl}`);
                return true;
              } else {
                console.log(`⚠️ ${index + 1}. hikaye paylaşıldı ama ID bulunamadı`);
                return true; // API yanıt verdi, muhtemelen başarılı
              }
              
            } catch (error) {
              console.error(`❌ ${index + 1}. hikaye başarısız:`, error.message);
              return false;
            }
          }
          
          async function main() {
            // Önce bağlantıyı test et
            const connectionOk = await testConnection();
            if (!connectionOk) {
              console.error('🚫 API bağlantısı kurulamadı, paylaşım yapılamıyor');
              return;
            }
            
            // 5 rastgele hikaye seç
            const secilenHikayeler = hikayeler.sort(() => 0.5 - Math.random()).slice(0, 5);
            
            console.log(`\n🎯 ${secilenHikayeler.length} hikaye paylaşılacak`);
            
            let basarili = 0;
            
            for (let i = 0; i < secilenHikayeler.length; i++) {
              const result = await postStatus(secilenHikayeler[i], i);
              if (result) basarili++;
              
              // Paylaşımlar arası bekleme
              if (i < secilenHikayeler.length - 1) {
                console.log('⏱️ 3 saniye bekleniyor...');
                await new Promise(resolve => setTimeout(resolve, 3000));
              }
            }
            
            console.log(`\n📊 === SONUÇ ===`);
            console.log(`📈 Toplam deneme: ${secilenHikayeler.length}`);
            console.log(`✅ Başarılı: ${basarili}`);
            console.log(`❌ Başarısız: ${secilenHikayeler.length - basarili}`);
            console.log(`🎯 Başarı oranı: ${Math.round((basarili / secilenHikayeler.length) * 100)}%`);
          }
          
          main().catch(error => {
            console.error('💥 Ana fonksiyonda hata:', error);
            process.exit(1);
          });
          EOF
          
          echo "🚀 Proxy ile paylaşım başlatılıyor..."
          node proxy-script.js
        env:
          MASTODON_TOKEN: ${{ secrets.MASTODON_TOKEN }}
          
      - name: Proxy İstatistikleri
        if: always()
        run: |
          echo "=== Proxy Kullanım Raporu ==="
          echo "🕐 İşlem tarihi: $(date)"
          echo "🌐 GitHub Actions IP: $(curl -s ifconfig.me)"
          echo "📋 Kullanılan proxy sayısı: $(wc -l < proxy_list.txt)"
          echo "✅ İşlem tamamlandı"
